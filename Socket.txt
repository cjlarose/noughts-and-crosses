Client Side:

Socket s;
try {
	s = new Socket(URL, port);
} catch (IOException ioe) {
ioe.PrintStackTrace();
//error handling
}

ObjectInputStream ois = new ObjectInputStream(s.getInputStream());
ObjectOutputStream oos = new ObjectOutputStream(s.getOutputStream());

Object input = ois.readObject();
//Warning: this blocks (Excecution is paused until something actually gets passed through)
//Rick will go over threading tomorrow (To encapsulate the reading in a thread, although Chris knows this already)
//for the sake of this demo, we won't worry about that yet
oos.writeObject("Hello");
s.close();


Server Side:
ServerSocket server = new ServerSocket(receiving_port);
//this port cannot already be bound by another program

socket s = server.accept()
//this blocks as well (program will stop until something comes in to try and establish a connection)
//client side happens after server side
ObjectInputStream ois = new ObjectInputStream(s.getInputStream());
ObjectOutputStream oos = new ObjectOutputStream(s.getOutputStream());

//now, the server and client sides are indistinguishable. First person to look for connection is server, then client connects, and then they are the same.
